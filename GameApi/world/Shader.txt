//V: comb
#version 330
uniform mat4 in_P;
uniform mat4 in_MV;
uniform mat4 in_T;
uniform float in_POS;
uniform float in_time;
in vec3 in_Position;
in vec3 in_Position2;
in vec3 in_Normal;
in vec4 in_Color;
in vec2 in_TexCoord;
out vec2 ex_TexCoord;
out vec4 ex_Color;
out vec3 ex_Normal;
out vec3 ex_Position;
out vec3 world_normal;
out vec3 world_pos;
vec4 point_light(vec4 pos)
{
   ex_Position = in_Position;
   return pos;
}
vec4 passall(vec4 pos)
{
  ex_Color = in_Color;
  ex_TexCoord = in_TexCoord;
  ex_Normal = in_Normal;
  ex_Position = in_Position;
  return pos;
}
vec4 edge(vec4 pos)
{
   world_pos = mat3(in_MV) * in_Position;
   world_normal = normalize(mat3(in_MV) * in_Normal);
   return pos;
}
vec4 snoise(vec4 pos)
{
   ex_Position = in_Position;
   return pos;
}
vec4 light(vec4 pos)
{
return pos;
}
vec4 blur(vec4 pos)
{
  ex_TexCoord = in_TexCoord;
  return pos;
}
vec4 ref(vec4 pos)
{
  ex_Position = in_Position;
  ex_Normal = in_Normal;
  return pos;
}
vec4 wave(vec4 pos)
{
  vec4 pos2 = pos + vec4(10.0*cos(2.0*in_time*in_Position.x*3.14159*2.0/360.0),
                         10.0*sin(3.0*in_time*in_Position.y*3.14159*2.0/360.0),
			 10.0*cos(5.0*in_time*in_Position.z*3.14159*2.0/360.0), 0.0);
  return pos2;
}
vec4 toon(vec4 pos)
{
  ex_Normal = in_Normal;
  return pos;
}
vec4 texture(vec4 pos)
{
  ex_TexCoord = in_TexCoord;
  return pos;
}
vec4 colour(vec4 pos)
{
   ex_Color = in_Color;
   return pos;
}
vec4 empty(vec4 pos)
{
   return pos;
}
void main(void)
{
//C:
}

//F: comb
#version 330
precision highp float;
in vec4 ex_Color;
out vec4 out_Color;
in vec2 ex_TexCoord;
in vec3 ex_Normal;
in vec3 ex_Position;
in vec3 world_normal;
in vec3 world_pos;
uniform vec3 eye_position;
uniform vec3 lightpos;
uniform sampler2D tex;
vec4 point_light(vec4 rgb)
{
   float dist = length(ex_Position.xyz - lightpos);
   float val = 100.0/dist;
   return vec4(val*vec3(rgb),rgb.a);
}
vec4 bands(vec4 rgb)
{
   float r = rgb.r;
   float g = rgb.g;
   float b = rgb.b;
   float a = rgb.a;
   int rr = int(r*256)&0xfff0;
   int gg = int(g*256)&0xfff0;
   int bb = int(b*256)&0xfff0;
   int aa = int(a*256)&0xfff0;
   float rrr = float(rr)/256.0;
   float ggg = float(gg)/256.0;
   float bbb = float(bb)/256.0;
   float aaa = float(aa)/256.0;
   vec4 rgb2 = vec4(rrr,ggg,bbb,aaa);
   return rgb2;
}
vec4 edge(vec4 rgb)
{
   vec3 V = normalize(eye_position-world_pos);
   
   float edgedetect = (dot(V,world_normal) >0.3) ? 1 : 0;
   return vec4(rgb.xyz*edgedetect,1);
}
vec4 dot2(vec4 rgb)
{
   vec3 pos = vec3(ex_TexCoord,1.0);
   //xpos = normalize(pos);
   return vec4(pos, 1.0);
}
vec4 snoise(vec4 rgb)
{
   vec2 coords = ex_Position.xy;
   float v = fract(sin(dot(coords.xy, vec2(12.9898,78.233))) * 43758.5453);
   return vec4(mix(vec3(rgb), vec3(v,v,v), 0.2),rgb.a);
}
vec4 blur(vec4 rgb)
{
  vec2 t_mx = ex_TexCoord + vec2(-0.005,0.0);
  vec2 t_my = ex_TexCoord + vec2(0.0,-0.005);
  vec2 t_px = ex_TexCoord + vec2(0.005,0.0);
  vec2 t_py = ex_TexCoord + vec2(0.0,0.005);

   vec4 tex2 = texture2D(tex, ex_TexCoord);
   vec4 tex_mx = texture2D(tex, t_mx);	
   vec4 tex_my = texture2D(tex, t_my);	
   vec4 tex_px = texture2D(tex, t_px);	
   vec4 tex_py = texture2D(tex, t_py);
   vec4 t1 = mix(tex_mx, tex_px, 0.5);
   vec4 t2 = mix(tex_my, tex_py, 0.5);
   vec4 t12 = mix(t1,t2,0.5);
   vec4 t12t = mix(t12,tex2,0.5);   	
   return vec4(mix(vec3(rgb),vec3(t12t),t12t.a),t12t.a);
}


vec4 ref(vec4 rgb)
{
   vec3 pos = ex_Position;
   vec3 norm = ex_Normal;
   pos = normalize(pos);
   norm = normalize(norm);
   vec4 r = vec4(refract(pos, norm, 0.5),1.0);
   float val = (r.r + r.g + r.b)/3.0;
   vec4 rr = vec4(val,val,val,1.0);
   return mix(rgb, rr, 0.5);
}
vec4 light(vec4 rgb)
{
  return clamp(1.5*rgb, vec4(0.0,0.0,0.0,0.0), vec4(1.0,1.0,1.0,1.0));
}
vec4 wave(vec4 rgb)
{
  return rgb;
}
vec4 toon(vec4 rgb)
{
   float intensity;
   vec4 color;
   intensity = dot(vec3(3.0,3.0,-3.0), normalize(ex_Normal));
   if (intensity >0.95)
      color = vec4(0.2,0.2,0.2, 1.0);
   else if (intensity >0.5)
      color = vec4(0.4,0.4,0.4, 1.0);
   else if (intensity >0.25)
      color = vec4(0.6,0.6,0.6, 1.0);
   else
      color = vec4(1.0,1.0,1.0, 1.0);
   return mix(rgb,color,0.5);
}
vec4 texture(vec4 rgb)
{
   vec4 tex = texture2D(tex, ex_TexCoord);	
   return vec4(mix(vec3(rgb),vec3(tex),tex.a),tex.a);
}
vec4 colour(vec4 rgb)
{
  return vec4(mix(vec3(rgb), vec3(ex_Color), ex_Color.a), ex_Color.a);    
}
vec4 empty(vec4 rgb)
{
   return rgb; 
}
void main(void)
{
//C:
}


//V: empty
#version 330
uniform mat4 in_P;
uniform mat4 in_MV;
uniform mat4 in_T;
in vec3 in_Position;
void main(void)
{
  vec4 v = in_P * in_T * in_MV * vec4(in_Position,1.0);
  gl_Position = v;
}

//F: empty
#version 330
precision highp float;
out vec4 out_Color;
void main(void)
{
   out_Color = vec4(1.0,1.0,1.0,1.0);
}

//V: colour
#version 330
/*layout(location=0)*/ in vec3 in_Position;
/*layout(location=1)*/ in vec3 in_Normal;
/*layout(location=2)*/ in vec4 in_Color;
/*layout(location=3)*/ in vec2 in_TexCoord;
out vec4 ex_Color;
uniform mat4 in_P;
uniform mat4 in_MV;
uniform mat4 in_T;
void main(void)
{
   gl_Position = in_P * in_T * in_MV * vec4(in_Position,1.0);
   ex_Color = in_Color;
}
//F: colour
#version 330
//precision highp float;
in vec4 ex_Color;
out vec4 out_Color;
void main(void)
{
   out_Color = vec4(ex_Color);
}

//V: texture
#version 330
/*layout(location=0)*/ in vec3 in_Position;
/*layout(location=1)*/ in vec3 in_Normal;
/*layout(location=2)*/ in vec3 in_Color;
/*layout(location=3)*/ in vec2 in_TexCoord;
out vec2 ex_TexCoord;
uniform mat4 in_P;
uniform mat4 in_MV;
uniform mat4 in_T;
void main(void)
{
   gl_Position = in_P * in_T * in_MV *  vec4(in_Position,1.0);
   ex_TexCoord = in_TexCoord;
}
//F: texture
#version 330
//precision highp float;
uniform sampler2D texture;
in vec2 ex_TexCoord;
out vec4 out_Color;
void main(void)
{
   out_Color = texture2D(texture, ex_TexCoord);
}



//V: linear
#version 330
uniform float range;
uniform vec3 center1, center2;
uniform float radius;
attribute vec3 vertex1;
attribute vec3 normal1;
attribute vec4 color1;
attribute vec2 texcoord1;

attribute vec3 vertex2;
attribute vec3 normal2;
attribute vec4 color2;
attribute vec2 texcoord2;

varying vec4 target_color;
varying vec3 target_normal;
varying vec2 target_texcoord;
varying vec2 target_texnormal;

uniform sampler2D tex;
uniform sampler2D normaltex;

float dist(vec3 center, vec3 point)
{
   point -= center;
   return sqrt(point.x*point.x+point.y*point.y+point.z*point.z);
}

vec3 Pos(float val, vec3 vertex, vec3 normal) {
  return vertex+val*normal;
}

float Solve(vec3 center, float radius, vec3 vertex, vec3 normal)
{
  float t = 0.0;
  for(;t<500.0;)
  {
    float Ht = -(dist(center, Pos(t, vertex, normal))-radius);
    if (Ht < 0.1) return t;
    t += Ht / 20.0;
  }
  return 0.0;
}

vec2 Angles(vec3 point, vec3 cent)
{
  point -= cent;
  float r = sqrt(point.x*point.x + point.y*point.y + point.z*point.z);
  float alfa = acos(point.z/r);
  float beta = atan(point.y, point.z);
  alfa /= 3.14159;
  beta /= 2.0*3.14159;
  alfa += 3.14159/2.0;
  beta += 3.14159/2.0;
  return vec2(alfa,beta);
}

void main(void)
{
  vec3 af = vertex1;
  vec3 aa = vertex2;
  //float x = af.x*(1.0-range)+aa.x*range;
  //float y = af.y*(1.0-range)+aa.y*range;
  //float z = af.z*(1.0-range)+aa.z*range;
  vec3 bb = mix(af,aa,range); // vec4(x,y,z,1.0);
  vec4 bb2 = vec4(bb.x,bb.y,bb.z,1.0);
  gl_Position = gl_ModelViewProjectionMatrix * bb2;

  vec4 col1 = vec4(float(color1.r)/255.0, float(color1.g)/255.0, float(color1.b)/255.0, float(color1.a)/255.0);
  vec4 col2 = vec4(float(color2.r)/255.0, float(color2.g)/255.0, float(color2.b)/255.0, float(color2.a)/255.0);

  target_color = vec4(col2.x*range+col1.x*(1.0-range), col2.y*range+col1.y*(1.0-range), col2.z*range+col1.z*(1.0-range), 1.0);
  target_normal = vec3(normal2.x*range+normal1.x*(1.0-range), normal2.y*range+normal1.y*(1.0-range), col2.z*range+col1.z*(1.0-range));;

  target_texcoord = vec2(texcoord1.x*(1.0-range)+texcoord2.x*range,texcoord1.y*(1.0-range)+texcoord2.y*range);
  vec3 center = mix(center1, center2, range);
  target_texnormal = Angles(Pos(Solve(center, radius, bb, target_normal.xyz), bb, target_normal.xyz), center);
}

//F: red
#version 330

varying vec4 target_color;
varying vec3 target_normal;
varying vec2 target_texcoord;
varying vec2 target_texnormal;

uniform sampler2D tex;
uniform sampler2D normaltex;
void main(void)
{
  vec4 ntex = texture(normaltex, target_texnormal);
  float nval = ntex.x;
  gl_FragColor = mix(mix(target_color, texture(tex, target_texcoord), 0.2), vec4(1.0,1.0,1.0,1.0), nval);
}
